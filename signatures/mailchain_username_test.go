package signatures

import (
	"testing"

	"github.com/mailchain/mailchain/crypto"
	"github.com/mailchain/mailchain/crypto/ed25519/ed25519test"
	"github.com/mailchain/mailchain/crypto/secp256k1/secp256k1test"
	"github.com/mailchain/mailchain/testing/asserterror"
	"github.com/stretchr/testify/assert"
)

func TestSignMailchainUsername(t *testing.T) {
	type args struct {
		key     crypto.PrivateKey
		message []byte
	}
	tests := []struct {
		name      string
		args      args
		want      []byte
		assertion assert.ErrorAssertionFunc
	}{
		{
			"ed25519-alice",
			args{
				ed25519test.AlicePrivateKey,
				[]byte("alice"),
			},
			[]byte{0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd, 0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c, 0x45, 0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1, 0xaa, 0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc},
			assert.NoError,
		},
		{
			"ed25519-bob",
			args{
				ed25519test.BobPrivateKey,
				[]byte("bob"),
			},
			[]byte{0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5, 0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac, 0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10, 0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd},
			assert.NoError,
		},
		{
			"ed25519-alice",
			args{
				secp256k1test.AlicePrivateKey,
				[]byte("hello"),
			},
			nil,
			asserterror.EqualError(ErrKeyNotSupported),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := SignMailchainUsername(tt.args.key, tt.args.message)
			tt.assertion(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestVerifyMailchainUsername(t *testing.T) {
	type args struct {
		key       crypto.PublicKey
		username  []byte
		signature []byte
	}
	tests := []struct {
		name      string
		args      args
		want      bool
		assertion assert.ErrorAssertionFunc
	}{
		{
			"valid-sig-ed25519-alice",
			args{
				ed25519test.AlicePublicKey,
				[]byte("alice"),
				[]byte{0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd, 0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c, 0x45, 0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1, 0xaa, 0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc},
			},
			true,
			assert.NoError,
		},
		{
			"valid-sig-ed25519-bob",
			args{
				ed25519test.BobPublicKey,
				[]byte("bob"),
				[]byte{0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5, 0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac, 0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10, 0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd},
			},
			true,
			assert.NoError,
		},
		{
			"incorrect-sig-ed25519-alice",
			args{
				ed25519test.AlicePublicKey,
				[]byte("not-alice"),
				[]byte{0x50, 0x2a, 0x4d, 0x32, 0x20, 0x94, 0x45, 0xda, 0xaf, 0x82, 0xc2, 0xfd, 0x73, 0xa9, 0x83, 0xeb, 0xd, 0xfb, 0x45, 0x92, 0x9b, 0x90, 0x46, 0xbb, 0x7c, 0x1d, 0xcd, 0x6d, 0xa7, 0x87, 0x8d, 0x6f, 0x4c, 0x45, 0x53, 0xd9, 0x2, 0xf8, 0xa6, 0x12, 0xae, 0x6f, 0x46, 0xd3, 0x4f, 0x75, 0x59, 0x30, 0xa8, 0xd1, 0xaa, 0xcb, 0xd, 0xf0, 0x5, 0xff, 0xc1, 0xb4, 0x7e, 0xe7, 0xe8, 0x3d, 0x4f, 0xc},
			},
			false,
			assert.NoError,
		},
		{
			"incorrect-sig-ed25519-bob",
			args{
				ed25519test.BobPublicKey,
				[]byte("not-bob"),
				[]byte{0xfe, 0xac, 0xe1, 0x62, 0xd7, 0x82, 0xae, 0xd, 0xff, 0x85, 0x9f, 0xe2, 0xc, 0x2a, 0xdd, 0xbe, 0xf5, 0xbf, 0x3c, 0xd4, 0x8f, 0x49, 0x5c, 0x45, 0x97, 0x7f, 0x87, 0x4f, 0xf5, 0xcf, 0x50, 0x67, 0xac, 0x20, 0x88, 0xf9, 0xc, 0x62, 0x68, 0xb9, 0xcf, 0x51, 0x7c, 0x51, 0xc4, 0x93, 0xae, 0xdb, 0x5b, 0x10, 0xfd, 0x53, 0x64, 0x90, 0x87, 0x83, 0x9f, 0x87, 0xe8, 0x8a, 0x32, 0x38, 0x84, 0xd},
			},
			false,
			assert.NoError,
		},
		{
			"secp256k1-alice",
			args{
				secp256k1test.AlicePublicKey,
				[]byte("hello"),
				nil,
			},
			false,
			asserterror.EqualError(ErrKeyNotSupported),
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := VerifyMailchainUsername(tt.args.key, tt.args.username, tt.args.signature)
			tt.assertion(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}
