package signatures

import (
	"bytes"
	"crypto/rand"
	"testing"

	"github.com/mailchain/mailchain/crypto"
	"github.com/mailchain/mailchain/crypto/ed25519"
	"github.com/mailchain/mailchain/crypto/ed25519/ed25519test"
	"github.com/mailchain/mailchain/crypto/secp256k1"
	"github.com/mailchain/mailchain/crypto/secp256k1/secp256k1test"
	"github.com/mailchain/mailchain/encoding"
	"github.com/mailchain/mailchain/internal/addressing/addressingtest"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
)

func TestSignMailchainProvidedMessagingKey(t *testing.T) {
	masterPrivateKey, err := ed25519.GenerateKey(bytes.NewBufferString("master-key-rand-func-0123456789-0123456789"))
	require.NoError(t, err)

	type args struct {
		key      crypto.PrivateKey
		msgKey   crypto.PublicKey
		address  string
		protocol string
	}
	tests := []struct {
		name      string
		args      args
		want      []byte
		assertion assert.ErrorAssertionFunc
	}{
		{
			"alice-ed25519",
			args{
				key:      masterPrivateKey,
				msgKey:   ed25519test.AlicePublicKey,
				address:  encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol: "ethereum",
			},
			[]byte{0x73, 0xa5, 0xfd, 0x94, 0x72, 0xcd, 0xe7, 0x55, 0xc8, 0x95, 0x65, 0xad, 0xa0, 0x10, 0xaa, 0xa, 0xe, 0x48, 0x34, 0xea, 0x29, 0x2, 0x29, 0x4e, 0xa4, 0x3, 0xc, 0x74, 0xe6, 0xe7, 0xb7, 0xb9, 0xa8, 0xff, 0x94, 0x3f, 0x2e, 0xb4, 0x1d, 0x7e, 0xce, 0xc, 0x9d, 0xa5, 0x66, 0x46, 0xd7, 0x18, 0xee, 0xe2, 0x46, 0xb6, 0x13, 0x14, 0xb0, 0x18, 0x20, 0x51, 0xca, 0xca, 0xe0, 0x9e, 0xe0, 0xe},
			assert.NoError,
		},
		{
			"bob-ed25519",
			args{
				key:      masterPrivateKey,
				msgKey:   ed25519test.BobPublicKey,
				address:  encoding.EncodeHexZeroX(addressingtest.EthereumBob),
				protocol: "ethereum",
			},
			[]byte{0xfe, 0x84, 0x20, 0x16, 0x7, 0x8a, 0x7b, 0xd1, 0x4, 0x2c, 0x96, 0xd5, 0x87, 0xde, 0xc5, 0x75, 0x69, 0x58, 0xd5, 0x18, 0xb8, 0x79, 0xa3, 0x8c, 0xdf, 0x78, 0xdc, 0x96, 0xe, 0xfd, 0xb3, 0x3f, 0x67, 0xd2, 0xa9, 0xcf, 0xc0, 0x26, 0x13, 0xf5, 0xa0, 0x4a, 0xc6, 0x14, 0x32, 0x5d, 0xf2, 0x39, 0xaf, 0x11, 0x26, 0x16, 0x2a, 0x73, 0xb3, 0x9f, 0xf, 0xbd, 0x4c, 0xb3, 0x3c, 0x3a, 0x27, 0x9},
			assert.NoError,
		},
		{
			"err-alice-secp256k1",
			args{
				key:      masterPrivateKey,
				msgKey:   secp256k1test.AlicePublicKey,
				address:  encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol: "ethereum",
			},
			nil,
			assert.Error,
		},
		{
			"err-invalid-master-key-secp256k1",
			args{
				key: func() crypto.PrivateKey {
					k, err := secp256k1.GenerateKey(rand.Reader)
					require.NoError(t, err)
					return k
				}(),
				msgKey:   secp256k1test.AlicePublicKey,
				address:  encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol: "ethereum",
			},
			nil,
			assert.Error,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := SignMailchainProvidedMessagingKey(tt.args.key, tt.args.msgKey, tt.args.address, tt.args.protocol)
			tt.assertion(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}

func TestVerifyMailchainProvidedMessagingKey(t *testing.T) {
	masterPrivateKey, err := ed25519.GenerateKey(bytes.NewBufferString("master-key-rand-func-0123456789-0123456789"))
	require.NoError(t, err)

	type args struct {
		key       crypto.PublicKey
		signature []byte
		msgKey    crypto.PublicKey
		address   string
		protocol  string
	}
	tests := []struct {
		name      string
		args      args
		want      bool
		assertion assert.ErrorAssertionFunc
	}{
		{
			"alice-ed25519",
			args{
				key:       masterPrivateKey.PublicKey(),
				msgKey:    ed25519test.AlicePublicKey,
				signature: []byte{0x73, 0xa5, 0xfd, 0x94, 0x72, 0xcd, 0xe7, 0x55, 0xc8, 0x95, 0x65, 0xad, 0xa0, 0x10, 0xaa, 0xa, 0xe, 0x48, 0x34, 0xea, 0x29, 0x2, 0x29, 0x4e, 0xa4, 0x3, 0xc, 0x74, 0xe6, 0xe7, 0xb7, 0xb9, 0xa8, 0xff, 0x94, 0x3f, 0x2e, 0xb4, 0x1d, 0x7e, 0xce, 0xc, 0x9d, 0xa5, 0x66, 0x46, 0xd7, 0x18, 0xee, 0xe2, 0x46, 0xb6, 0x13, 0x14, 0xb0, 0x18, 0x20, 0x51, 0xca, 0xca, 0xe0, 0x9e, 0xe0, 0xe},
				address:   encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol:  "ethereum",
			},
			true,
			assert.NoError,
		},
		{
			"bob-ed25519",
			args{
				key:       masterPrivateKey.PublicKey(),
				msgKey:    ed25519test.BobPublicKey,
				signature: []byte{0xfe, 0x84, 0x20, 0x16, 0x7, 0x8a, 0x7b, 0xd1, 0x4, 0x2c, 0x96, 0xd5, 0x87, 0xde, 0xc5, 0x75, 0x69, 0x58, 0xd5, 0x18, 0xb8, 0x79, 0xa3, 0x8c, 0xdf, 0x78, 0xdc, 0x96, 0xe, 0xfd, 0xb3, 0x3f, 0x67, 0xd2, 0xa9, 0xcf, 0xc0, 0x26, 0x13, 0xf5, 0xa0, 0x4a, 0xc6, 0x14, 0x32, 0x5d, 0xf2, 0x39, 0xaf, 0x11, 0x26, 0x16, 0x2a, 0x73, 0xb3, 0x9f, 0xf, 0xbd, 0x4c, 0xb3, 0x3c, 0x3a, 0x27, 0x9},
				address:   encoding.EncodeHexZeroX(addressingtest.EthereumBob),
				protocol:  "ethereum",
			},
			true,
			assert.NoError,
		},
		{
			"err-alice-secp256k1",
			args{
				key:       masterPrivateKey.PublicKey(),
				msgKey:    secp256k1test.AlicePublicKey,
				signature: []byte{0xfe, 0x84, 0x20, 0x16, 0x7, 0x8a, 0x7b, 0xd1, 0x4, 0x2c, 0x96, 0xd5, 0x87, 0xde, 0xc5, 0x75, 0x69, 0x58, 0xd5, 0x18, 0xb8, 0x79, 0xa3, 0x8c, 0xdf, 0x78, 0xdc, 0x96, 0xe, 0xfd, 0xb3, 0x3f, 0x67, 0xd2, 0xa9, 0xcf, 0xc0, 0x26, 0x13, 0xf5, 0xa0, 0x4a, 0xc6, 0x14, 0x32, 0x5d, 0xf2, 0x39, 0xaf, 0x11, 0x26, 0x16, 0x2a, 0x73, 0xb3, 0x9f, 0xf, 0xbd, 0x4c, 0xb3, 0x3c, 0x3a, 0x27, 0x9},
				address:   encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol:  "ethereum",
			},
			false,
			assert.Error,
		},
		{
			"err-invalid-master-key-secp256k1",
			args{
				key: func() crypto.PrivateKey {
					k, err := secp256k1.GenerateKey(rand.Reader)
					require.NoError(t, err)
					return k
				}().PublicKey(),
				msgKey:    secp256k1test.AlicePublicKey,
				signature: []byte{0xfe, 0x84, 0x20, 0x16, 0x7, 0x8a, 0x7b, 0xd1, 0x4, 0x2c, 0x96, 0xd5, 0x87, 0xde, 0xc5, 0x75, 0x69, 0x58, 0xd5, 0x18, 0xb8, 0x79, 0xa3, 0x8c, 0xdf, 0x78, 0xdc, 0x96, 0xe, 0xfd, 0xb3, 0x3f, 0x67, 0xd2, 0xa9, 0xcf, 0xc0, 0x26, 0x13, 0xf5, 0xa0, 0x4a, 0xc6, 0x14, 0x32, 0x5d, 0xf2, 0x39, 0xaf, 0x11, 0x26, 0x16, 0x2a, 0x73, 0xb3, 0x9f, 0xf, 0xbd, 0x4c, 0xb3, 0x3c, 0x3a, 0x27, 0x9},
				address:   encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol:  "ethereum",
			},
			false,
			assert.Error,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := VerifyMailchainProvidedMessagingKey(tt.args.key, tt.args.signature, tt.args.msgKey, tt.args.address, tt.args.protocol)
			tt.assertion(t, err)
			assert.Equal(t, tt.want, got)
		})
	}
}

func Test_mailchainProvidedMessagingKeyMessage(t *testing.T) {
	type args struct {
		msgKey   crypto.PublicKey
		address  string
		protocol string
	}
	tests := []struct {
		name      string
		args      args
		want      string
		assertion assert.ErrorAssertionFunc
	}{
		{
			"alice-ethereum",
			args{
				msgKey:   ed25519test.AlicePublicKey,
				address:  encoding.EncodeHexZeroX(addressingtest.EthereumAlice),
				protocol: "ethereum",
			},
			"\x11Mailchain provided messaging key:\nAddress:0xd5ab4ce3605cd590db609b6b5c8901fdb2ef7fe6\nProtocol:ethereum\nKey:0xe2723caa23a5b511af5ad7b7ef6076e414ab7e75a9dc910ea60e417a2b770a5671",
			assert.NoError,
		},
	}
	for _, tt := range tests {
		t.Run(tt.name, func(t *testing.T) {
			got, err := mailchainProvidedMessagingKeyMessage(tt.args.msgKey, tt.args.address, tt.args.protocol)
			tt.assertion(t, err)
			assert.Equal(t, tt.want, string(got))
		})
	}
}
